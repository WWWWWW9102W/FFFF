#ex1

def create_car(brand, color, max_speed)
    return f"марка: {brand} Цвет: {color} Максимальная скорость: {max_speed} км/ч"
car_1 = create_car("Toyota", "черный", 410)
car_2 = create_car("Audi", "красный", 350)
print(car_1)
print(car_2)

#ex2

# a = int(input("введи число 1 стороны: "))
# b = int(input("введи число 2 стороны: "))
# c = int(input("введи число 3 стороны: "))
# print(f"итого у нас стороны со значениями {a},{b} и {c}")
# p = a + b + c
# s = p / 2
# g = (s * (s - a) * (s - b) * (s - c)) ** 0.5
# f = round(g,2)
# def triangle(a,b,c):
#     if a==b and a==c and b==c:
#         print("тип треугольника - равносторонний")
#     elif a==b!=c or a!=b==c or a==c!=b:
#         print("тип треугольника - равнобедренный")
#     elif a!=b!=c:
#         print("тип треугольника - разносторонный")
# triangle(a,b,c)
# print(f"периметр - {p}, \nполупериметр - {s}, \nплощадь - {f}")

#ex3

def triangle(a,b,c):
    if a + b <= c or a + c <= b or b + c <= a:
        print ("Некорректные стороны. Невозможно построить треугольник")
        return
    if a == b == c:
        print (f"Длина сторон треугольника: {a}, {b}, {c}\nИнформация: \nРавносторонний треугольник.")
    elif a == b or a == c or b == c:
        print(f"Длина сторон треугольника:  {a}, {b}, {c}\nИнформация: \nРавнобедренный треугольник. ")
    else:
        print(f"Длина сторон треугольника:  {a}, {b}, {c}\nИнформация: \nРазносторонний треугольник.")
def triangle(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        print("Некорректные стороны. Невозможно построить треугольник.")
        return
    perimeter = a + b + c
    s = perimeter / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    if a == b == c:
        triangle_type = "Равносторонний треугольник."
    elif a == b or a == c or b == c:
        triangle_type = "Равнобедренный треугольник."
    else:
        triangle_type = "Разносторонний треугольник."
    print(f"Длина сторон треугольника: {a}, {b}, {c}")
    print(f"Информация:\n{triangle_type}")
    print(f"Периметр: {perimeter}")
    print(f"Площадь: {area:.2f}")
triangle(15, 15, 15)  # Равносторонний
triangle(15, 20, 15)  # Равнобедренный
triangle(15, 20, 25)  # Разносторонний
triangle(1, 2, 3)     # Некорректные
#ex4
in_numb=int(input("введите исходное число: "))
out_numb=int(input("введите конечное число: "))
def num_change(in_numb, out_numb):
    count=0
    while in_numb != out_numb:
        if in_numb>out_numb:
            in_numb-=1
        elif in_numb<out_numb:
            in_numb+=1
        count+=1
    return(count,in_numb,out_numb)
print(num_change(in_numb,out_numb))

# ex5

# player =0
# def info_player():
#     print(f"игрок пробежал {player} км")
# def run_player(km):
#     global player
#     player+=km/2
# info_player()
# run_player(30)
# run_player(12.5)
# info_player()

# ex6

def number_properties(number: int) -> str:
    """
    Определяет, является ли число чётным или нечётным, а также вычисляет его умножение на 2 или квадрат.

    Функция выполняет следующие действия:
    - Проверяет, чётное ли число.
    - Вычисляет умножение на 2/квадрат числа соответственно.

    Параметры:
    number (int): Целое число, для которого нужно определить чётность и вычислить умножение на 2/квадрат.

    Возвращает:
    str: Строку с информацией о числе:
        - Является ли оно чётным или нечётным.
        - Умножение на 2/Квадрат числа соответственно.

    Исключения:
    - Если число не является целым (например, дробное или строка), выбрасывается ошибка ValueError.

    Пример:
    >> number_properties(4)
    Число: 4
    Чётное: True
    Умножение числа: 8

    >> number_properties(5)
    Число: 5
    Чётное: False
    Квадрат числа: 25
    """

    # Проверка на чётность
    is_even = number % 2 == 0

    #
    if is_even == True:
        sq=number*2
    else:
        sq=number**2

    # Формирование строки с результатами
    return f"Число: {number}\nЧётное: {is_even}\nДействие с числом: {sq}"

# Пример использования:
print(number_properties.__doc__)  # Документация функции
print(number_properties(4))  # Число 4
print(number_properties(5))  # Число 5
